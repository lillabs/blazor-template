@using Model.Entities.Authentication
<MudPaper class="ml-5 pa-4 position-relative rounded-r-xl" Style="width: 100%" Outlined="true" Elevation="5" Square="true">

    @if (ErrorMessage is not null)
    {
        <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="() => ErrorMessage = null">
            @(ErrorMessage)
        </MudAlert>
    }

    <MudStack Spacing="6">
        <MudText Typo="Typo.h5">Username</MudText>
        <MudText Color="Color.Secondary">@User.Username</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Change Username</MudButton>
        <MudDivider DividerType="DividerType.Middle"/>
        <MudText Typo="Typo.h5">Email</MudText>
        <MudText Color="Color.Secondary">@_hiddenEmail</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Change Email</MudButton>
        <MudDivider DividerType="DividerType.Middle"/>
        <MudText Typo="Typo.h5">Password</MudText>
        <MudText Color="Color.Secondary">********</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary">Change Password</MudButton>
        <MudDivider DividerType="DividerType.Middle"/>
    </MudStack>

    <MudOverlay Visible="IsLoading" DarkBackground="true" AutoClose="false" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" StrokeWidth="5"/>
    </MudOverlay>
</MudPaper>

@code {

    [Parameter]
    public string? ErrorMessage { get; set; }

    [Parameter]
    public EventCallback<string?> ErrorMessageChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public bool IsLoading { get; set; }

    [Parameter]
    [EditorRequired]
    public User User { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback SaveClick { get; set; }

    bool _isShow;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType _passwordInputType = InputType.Password;

    void ShowPwd()
    {
        if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInputType = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInputType = InputType.Text;
        }
    }

    string _hiddenEmail = null!;

    protected override async Task OnInitializedAsync()
    {
        _hiddenEmail = await UserRepository.GetHiddenEmail(User.Email);
    }

}